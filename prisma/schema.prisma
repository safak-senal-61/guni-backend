
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  STUDENT
  TEACHER
  ADMIN
  PARENT
}

enum LearningStyle {
  VISUAL
  AUDITORY
  KINESTHETIC
  READ_WRITE
}

enum ContentType {
  LESSON
  VIDEO
  QUIZ
  EXERCISE
  INTERACTIVE
}

enum QuizType {
  MULTIPLE_CHOICE
  OPEN_ENDED
  DRAG_DROP
}

enum MessageType {
  TEXT
  IMAGE
  FILE
  VOICE
}

enum AchievementCategory {
  PROGRESS
  SUBJECT_MASTERY
  SOCIAL
  GAMIFICATION
  SPECIAL
}

enum Gender {
  MALE
  FEMALE
  OTHER
  PREFER_NOT_TO_SAY
}

enum GradeLevel {
  GRADE_1
  GRADE_2
  GRADE_3
  GRADE_4
  GRADE_5
  GRADE_6
  GRADE_7
  GRADE_8
  GRADE_9
  GRADE_10
  GRADE_11
  GRADE_12
}

enum OnboardingStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
}

model User {
  id            String        @id @default(uuid())
  email         String        @unique
  password      String
  firstName     String
  lastName      String
  role          UserRole      @default(STUDENT)
  isEmailVerified Boolean     @default(false)
  emailVerificationToken String?
  emailVerificationExpires DateTime?
  passwordResetToken String?
  passwordResetExpires DateTime?
  dateOfBirth   DateTime? // Optional
  age           Int?
  gender        Gender?
  gradeLevel    GradeLevel?
  onboardingStatus OnboardingStatus @default(NOT_STARTED)
  preferences   Json? // Stores learning style, subjects, etc.
  weakSubjects  String[]      @default([]) // Subjects where user needs improvement
  hashedRefreshToken String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // Relationships
  profile          UserProfile?
  lessonsCompleted LessonProgress[]
  quizzesTaken     QuizAttempt[]
  messages         Message[]
  achievements     UserAchievement[]
  videoAnalyses    VideoAnalysis[]
  assessmentResults AssessmentResult[]
  
  // Parent-Student relationships
  parentConnections ParentStudentConnection[] @relation("ParentUser")
  studentConnections ParentStudentConnection[] @relation("StudentUser")
  
  // Notifications
  sentNotifications Notification[] @relation("NotificationSender")
  receivedNotifications Notification[] @relation("NotificationReceiver")
  
  // Progress summaries
  progressSummaries StudentProgressSummary[]
  
  // AI Chat messages
  chatMessages ChatMessage[]
}

model Lesson {
  id                 String           @id @default(uuid())
  title              String
  description        String?
  subject            String
  topic              String?
  difficulty         String
  type               ContentType
  duration           Int? // in minutes
  content            Json? // Stores structured content, e.g., sections, interactive elements
  thumbnail          String?
  tags               String[]         @default([])
  prerequisites      String[]         @default([])
  learningObjectives String[]         @default([])
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt

  // Relationships
  progress           LessonProgress[]
  quizzes            Quiz[]
}

model LessonProgress {
  id          String   @id @default(uuid())
  userId      String
  lessonId    String
  progress    Int      @default(0) // Percentage completed
  timeSpent   Int      @default(0) // in seconds
  completed   Boolean  @default(false)
  lastAccessed DateTime @updatedAt
  createdAt   DateTime @default(now())

  user        User     @relation(fields: [userId], references: [id])
  lesson      Lesson   @relation(fields: [lessonId], references: [id])

  @@unique([userId, lessonId])
}

model Quiz {
  id                 String      @id @default(uuid())
  lessonId           String?
  title              String
  description        String?
  subject            String
  topic              String?
  difficulty         String
  quizType           QuizType
  questionCount      Int
  passingScore       Int
  questions          Json // Array of question objects
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt

  // Relationships
  lesson             Lesson?     @relation(fields: [lessonId], references: [id])
  attempts           QuizAttempt[]
}

model QuizAttempt {
  id          String   @id @default(uuid())
  userId      String
  quizId      String
  score       Int
  completed   Boolean  @default(false)
  answers     Json // Stores user's answers and feedback
  timeTaken   Int? // in seconds
  attemptDate DateTime @default(now())

  user        User     @relation(fields: [userId], references: [id])
  quiz        Quiz     @relation(fields: [quizId], references: [id])
}

model ChatMessage {
  id        String   @id @default(uuid())
  userId    String
  content   String
  role      String   // 'user' or 'assistant'
  timestamp DateTime @default(now())
  metadata  Json?    // Additional context or data
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id])
}

model Message {
  id            String      @id @default(uuid())
  senderId      String
  receiverId    String?
  groupId       String?
  content       String
  messageType   MessageType @default(TEXT)
  attachments   String[]    @default([]) // URLs or file paths
  createdAt     DateTime    @default(now())
  readAt        DateTime?

  sender        User        @relation(fields: [senderId], references: [id])
  // Add relations for receiver and group if needed, e.g., for direct messages or group chats
}

model Achievement {
  id          String            @id @default(uuid())
  title       String
  description String
  icon        String // URL to icon image
  category    AchievementCategory
  points      Int
  rarity      String // e.g., "common", "rare", "epic"
  requirements Json // Criteria to unlock the achievement
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  userAchievements UserAchievement[]
}

model UserAchievement {
  id            String   @id @default(uuid())
  userId        String
  achievementId String
  unlockedAt    DateTime @default(now())
  progress      Json? // Current progress towards achievement if not yet unlocked

  user          User     @relation(fields: [userId], references: [id])
  achievement   Achievement @relation(fields: [achievementId], references: [id])

  @@unique([userId, achievementId])
}

model VideoAnalysis {
  id                 String   @id @default(uuid())
  userId             String
  videoUrl           String
  title              String?
  duration           Int? // in seconds
  summary            Json // Stores main summary, key points, topics, etc.
  timestamps         Json? // Stores timestamped events/sections
  notes              Json? // Stores generated notes
  status             String   @default("processing") // "processing", "completed", "failed"
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  user               User     @relation(fields: [userId], references: [id])
}

model UserProfile {
  id                 String   @id @default(uuid())
  userId             String   @unique
  learningStyle      LearningStyle?
  interests          String[] @default([])
  goals              String[] @default([])
  studyHours         Int?     // Preferred daily study hours
  difficultyPreference String? // "easy", "medium", "hard"
  personalizedContent Json?   // AI-generated personalized content recommendations
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  user               User     @relation(fields: [userId], references: [id])
}

model AssessmentResult {
  id                 String   @id @default(uuid())
  userId             String
  subject            String
  topic              String?
  score              Int      // Score out of 100
  totalQuestions     Int
  correctAnswers     Int
  weakAreas          String[] @default([])
  recommendations    Json?    // AI-generated recommendations
  metadata           Json?    // Additional assessment metadata
  assessmentType     String   // "onboarding", "diagnostic", "progress"
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  user               User     @relation(fields: [userId], references: [id])
}

// Parent-Student Connection Model
model ParentStudentConnection {
  id                 String   @id @default(uuid())
  parentId           String
  studentId          String
  connectionStatus   String   @default("pending") // "pending", "approved", "rejected"
  inviteCode         String?  // Optional invite code for connection
  requestedAt        DateTime @default(now())
  approvedAt         DateTime?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  parent             User     @relation("ParentUser", fields: [parentId], references: [id])
  student            User     @relation("StudentUser", fields: [studentId], references: [id])

  @@unique([parentId, studentId])
}

// Notification System
model Notification {
  id                 String   @id @default(uuid())
  senderId           String?
  receiverId         String
  title              String
  message            String
  type               String   // "achievement", "progress", "quiz_completed", "lesson_completed", "parent_request"
  data               Json?    // Additional data related to notification
  isRead             Boolean  @default(false)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  sender             User?    @relation("NotificationSender", fields: [senderId], references: [id])
  receiver           User     @relation("NotificationReceiver", fields: [receiverId], references: [id])
}

// Student Progress Summary for Parents
model StudentProgressSummary {
  id                 String   @id @default(uuid())
  studentId          String
  parentId           String
  weeklyLessons      Int      @default(0)
  weeklyQuizzes      Int      @default(0)
  averageScore       Float    @default(0)
  totalStudyTime     Int      @default(0) // in minutes
  weakSubjects       String[] @default([])
  strongSubjects     String[] @default([])
  achievements       Json?    // Recent achievements
  weekStartDate      DateTime
  weekEndDate        DateTime
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  student            User     @relation(fields: [studentId], references: [id])
  
  @@unique([studentId, parentId, weekStartDate])
}


